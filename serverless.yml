org: coreradix
app: api-weather
service: api-weather

plugins:
  - serverless-offline

frameworkVersion: '3'

package:
  individually: true
  exclude:
    - ./**

custom:
  serverless-offline:
    noPrependStageInUrl: true

provider:
  name: aws
  region: ap-southeast-1
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  apiGateway:
    binaryMediaTypes:
      - '*/*'
  stage: ${opt:stage, 'develop'}
  environment:
    APP_STAGE: ${self:provider.stage}
    OPENWEATHER_KEY: ${param:OPENWEATHER_KEY}
    API_PRIVATE_KEY: ${param:API_PRIVATE_KEY}

functions:

  main:
    handler: dist/main.handler
    package:
      include:
        - dist/**
    events:
      - http:
          method: ANY
          path: /
      - http:
          method: ANY
          path: '{proxy+}'
    role: LambdaAccessRole

resources:
  Resources:

    # IAM ROLES AND POLICIES
    LambdaAccessRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  